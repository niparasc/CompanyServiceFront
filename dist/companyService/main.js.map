{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/beneficial-owner-create/beneficial-owner-create.component.css","webpack:///./src/app/beneficial-owner-create/beneficial-owner-create.component.html","webpack:///./src/app/beneficial-owner-create/beneficial-owner-create.component.ts","webpack:///./src/app/beneficial-owner.service.ts","webpack:///./src/app/beneficial-owners/beneficial-owners.component.css","webpack:///./src/app/beneficial-owners/beneficial-owners.component.html","webpack:///./src/app/beneficial-owners/beneficial-owners.component.ts","webpack:///./src/app/companies/companies.component.css","webpack:///./src/app/companies/companies.component.html","webpack:///./src/app/companies/companies.component.ts","webpack:///./src/app/company-add-owner/company-add-owner.component.css","webpack:///./src/app/company-add-owner/company-add-owner.component.html","webpack:///./src/app/company-add-owner/company-add-owner.component.ts","webpack:///./src/app/company-create/company-create.component.css","webpack:///./src/app/company-create/company-create.component.html","webpack:///./src/app/company-create/company-create.component.ts","webpack:///./src/app/company-update/company-update.component.css","webpack:///./src/app/company-update/company-update.component.html","webpack:///./src/app/company-update/company-update.component.ts","webpack:///./src/app/company.service.ts","webpack:///./src/app/company/company.component.css","webpack:///./src/app/company/company.component.html","webpack:///./src/app/company/company.component.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/domain/beneficialOwner.ts","webpack:///./src/app/domain/company.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { CompaniesComponent } from './companies/companies.component'\r\nimport { CompanyComponent } from './company/company.component';\r\nimport { CompanyCreateComponent } from './company-create/company-create.component';\r\nimport { CompanyUpdateComponent } from './company-update/company-update.component';\r\nimport { CompanyAddOwnerComponent } from './company-add-owner/company-add-owner.component';\r\nimport { BeneficialOwnersComponent } from './beneficial-owners/beneficial-owners.component';\r\nimport { BeneficialOwnerCreateComponent } from './beneficial-owner-create/beneficial-owner-create.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\r\n  { path: 'dashboard', component: DashboardComponent },\r\n  { path: 'companies', component: CompaniesComponent },\r\n  { path: 'companies/:id', component: CompanyComponent },\r\n  { path: 'companyCreate', component: CompanyCreateComponent },\r\n  { path: 'companyUpdate/:id', component: CompanyUpdateComponent },\r\n  { path: 'companyAddOwner/:id', component: CompanyAddOwnerComponent },\r\n  { path: 'beneficialOwners', component: BeneficialOwnersComponent },\r\n  { path: 'beneficialOwnerCreate', component: BeneficialOwnerCreateComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<h1>Company Service</h1>\\r\\n<a routerLink=\\\"/companies\\\">Companies</a> | <a routerLink=\\\"/beneficialOwners\\\">Beneficial Owners</a>\\r\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { CompanyComponent } from './company/company.component';\r\nimport { AppRoutingModule } from './/app-routing.module';\r\nimport { CompanyCreateComponent } from './company-create/company-create.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { BeneficialOwnersComponent } from './beneficial-owners/beneficial-owners.component';\r\nimport { BeneficialOwnerCreateComponent } from './beneficial-owner-create/beneficial-owner-create.component';\r\nimport { CompanyUpdateComponent } from './company-update/company-update.component';\r\nimport { CompanyAddOwnerComponent } from './company-add-owner/company-add-owner.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CompaniesComponent,\r\n    CompanyComponent,\r\n    CompanyCreateComponent,\r\n    DashboardComponent,\r\n    BeneficialOwnersComponent,\r\n    BeneficialOwnerCreateComponent,\r\n    CompanyUpdateComponent,\r\n    CompanyAddOwnerComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<h2>Create Beneficial Owner</h2>\\n\\n<div>\\n    <label>First Name:</label>\\n    <br>\\n    <div *ngIf='errors.firstName'><span class='validationError'>{{errors.firstName}}</span></div>\\n    <input [(ngModel)]=\\\"beneficialOwner.firstName\\\" /><br>\\n\\n    <label>Last Name:</label>\\n    <br>\\n    <div *ngIf='errors.lastName'><span class='validationError'>{{errors.lastName}}</span></div>\\n    <input [(ngModel)]=\\\"beneficialOwner.lastName\\\" /><br>\\n\\n    <br>\\n    \\n    <button (click)=\\\"createBeneficialOwner();\\\">\\n      Create\\n    </button>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { BeneficialOwner } from '../domain/beneficialOwner';\nimport { BeneficialOwnerService } from '../beneficial-owner.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-beneficial-owner-create',\n  templateUrl: './beneficial-owner-create.component.html',\n  styleUrls: ['./beneficial-owner-create.component.css']\n})\nexport class BeneficialOwnerCreateComponent implements OnInit {\n\n  beneficialOwner: BeneficialOwner;\n  errors;\n\n  constructor(private beneficialOwnerService: BeneficialOwnerService, private router: Router) { }\n\n  ngOnInit() {\n    this.errors = {};\n    this.beneficialOwner = new BeneficialOwner();\n  }\n\n  createBeneficialOwner() {\n    this.beneficialOwnerService.createBeneficialOwner(this.beneficialOwner)\n    .subscribe(owner => this.router.navigate(['/beneficialOwners']), \n               error => this.errors = error.error.response);\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { BeneficialOwner } from './domain/beneficialOwner';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BeneficialOwnerService {\r\n\r\n  private ownersUrl = 'https://mighty-caverns-62961.herokuapp.com/beneficialOwners';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getBeneficialOwners(): Observable<BeneficialOwner[]> {\r\n    return this.http.get<BeneficialOwner[]>(this.ownersUrl);\r\n  }\r\n\r\n  createBeneficialOwner (owner: BeneficialOwner): Observable<BeneficialOwner> {\r\n    return this.http.post<BeneficialOwner>(this.ownersUrl, owner);\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2>Beneficial Owners</h2>\\r\\n\\r\\n<button routerLink=\\\"/beneficialOwnerCreate\\\">Create</button>\\r\\n\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let owner of beneficialOwners\\\">\\r\\n    {{owner.firstName}} {{owner.lastName}}\\r\\n  </li>\\r\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { BeneficialOwnerService } from '../beneficial-owner.service';\nimport { BeneficialOwner } from '../domain/beneficialOwner';\n\n@Component({\n  selector: 'app-beneficial-owners',\n  templateUrl: './beneficial-owners.component.html',\n  styleUrls: ['./beneficial-owners.component.css']\n})\nexport class BeneficialOwnersComponent implements OnInit {\n\n  beneficialOwners: BeneficialOwner[];\n\n  constructor(private beneficialOwnerService: BeneficialOwnerService) { }\n\n  ngOnInit() {\n    this.getBeneficialOwners();\n  }\n\n  getBeneficialOwners(): void {\n    this.beneficialOwnerService.getBeneficialOwners()\n      .subscribe(beneficialOwners => this.beneficialOwners = beneficialOwners);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Companies</h2>\\r\\n\\r\\n<button routerLink=\\\"/companyCreate\\\">Create</button>\\r\\n\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let company of companies\\\">\\r\\n    <a routerLink=\\\"/companies/{{company.id}}\\\">{{company.name}}</a>\\r\\n  </li>\\r\\n</ul>\"","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '../company.service';\r\nimport { Company } from '../domain/company';\r\n\r\n@Component({\r\n  selector: 'app-companies',\r\n  templateUrl: './companies.component.html',\r\n  styleUrls: ['./companies.component.css']\r\n})\r\nexport class CompaniesComponent implements OnInit {\r\n\r\n  companies: Company[];\r\n\r\n  constructor(private companyService: CompanyService) { }\r\n\r\n  ngOnInit() {\r\n    this.getCompanies();\r\n  }\r\n\r\n  getCompanies(): void {\r\n    this.companyService.getCompanies()\r\n      .subscribe(companies => this.companies = companies);\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2>Add Owner to {{company.name}}</h2>\\r\\n\\r\\n<label>Beneficial Owners:</label>\\r\\n<br>\\r\\n<div *ngIf='errors.beneficialOwners'><span class='validationError'>{{errors.beneficialOwners}}</span></div>\\r\\n<select [(ngModel)]=\\\"selectedOwner\\\">\\r\\n  <option></option>\\r\\n  <option *ngFor=\\\"let owner of beneficialOwners\\\" [ngValue]=\\\"owner\\\">{{owner.firstName}} {{owner.lastName}}</option>\\r\\n</select>\\r\\n<br>\\r\\n<br>\\r\\n<button (click)=\\\"addOwner();\\\">\\r\\n  Add\\r\\n</button>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CompanyService } from '../company.service';\r\nimport { Company } from '../domain/company';\r\nimport { BeneficialOwnerService } from '../beneficial-owner.service';\r\nimport { BeneficialOwner } from '../domain/beneficialOwner';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-company-add-owner',\r\n  templateUrl: './company-add-owner.component.html',\r\n  styleUrls: ['./company-add-owner.component.css']\r\n})\r\nexport class CompanyAddOwnerComponent implements OnInit {\r\n\r\n  company: Company\r\n  beneficialOwners: BeneficialOwner[];\r\n  selectedOwner: BeneficialOwner;\r\n  errors;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private companyService: CompanyService,\r\n    private beneficialOwnerService: BeneficialOwnerService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.errors = {};\r\n    this.company = new Company();\r\n    this.getCompany();\r\n    this.getBeneficialOwners();\r\n    this.selectedOwner = new BeneficialOwner();\r\n  }\r\n\r\n  getCompany(): void {\r\n    const id = +this.route.snapshot.paramMap.get('id');\r\n    this.companyService.getCompany(id)\r\n      .subscribe(company => this.company = company);\r\n  }\r\n\r\n  getBeneficialOwners(): void {\r\n    this.beneficialOwnerService.getBeneficialOwners()\r\n      .subscribe(beneficialOwners => this.beneficialOwners = beneficialOwners);\r\n  }\r\n\r\n  addOwner(): void {\r\n    if (!this.selectedOwner.id) {\r\n      this.errors = {beneficialOwners: \"You must select an owner\"};\r\n      return;\r\n    }\r\n\r\n    this.companyService.addOwnersToCompany(this.company, {\"beneficialOwnerIds\": [this.selectedOwner.id]})\r\n                       .subscribe(company => this.router.navigate(['/companies/' + this.company.id]),\r\n                                  error => this.errors = error.error.response);\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2>Create Company</h2>\\r\\n\\r\\n<div>\\r\\n    <label>Name:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.name'><span class='validationError'>{{errors.name}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.name\\\" /><br>\\r\\n\\r\\n    <label>Address:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.address'><span class='validationError'>{{errors.address}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.address\\\" /><br>\\r\\n    \\r\\n    <label>City:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.city'><span class='validationError'>{{errors.city}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.city\\\" /><br>\\r\\n    \\r\\n    <label>Country:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.country'><span class='validationError'>{{errors.country}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.country\\\" /><br>\\r\\n    \\r\\n    <label>Email:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.email'><span class='validationError'>{{errors.email}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.email\\\" /><br>\\r\\n    \\r\\n    <label>Phone:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.phone'><span class='validationError'>{{errors.phone}}</span></div>\\r\\n    <input [(ngModel)]=\\\"company.phone\\\" /><br>\\r\\n    \\r\\n    <label>Beneficial Owners:</label>\\r\\n    <br>\\r\\n    <div *ngIf='errors.beneficialOwners'><span class='validationError'>{{errors.beneficialOwners}}</span></div>\\r\\n    <select multiple [(ngModel)]=\\\"company.beneficialOwners\\\">\\r\\n      <option *ngFor=\\\"let owner of beneficialOwners\\\" [ngValue]=\\\"owner\\\">{{owner.firstName}} {{owner.lastName}}</option>\\r\\n    </select>\\r\\n    <br>\\r\\n\\r\\n    <br>\\r\\n    \\r\\n    <button (click)=\\\"createCompany();\\\">\\r\\n      Create\\r\\n    </button>\\r\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Company } from '../domain/company';\nimport { BeneficialOwner } from '../domain/beneficialOwner';\nimport { CompanyService } from '../company.service';\nimport { BeneficialOwnerService } from '../beneficial-owner.service'\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-company-create',\n  templateUrl: './company-create.component.html',\n  styleUrls: ['./company-create.component.css']\n})\nexport class CompanyCreateComponent implements OnInit {\n\n  company: Company;\n  beneficialOwners: BeneficialOwner[];\n  errors;\n\n  constructor(private companyService: CompanyService,\n              private beneficialOwnerService: BeneficialOwnerService,\n              private router: Router) { }\n\n  ngOnInit() {\n    this.errors = {};\n    this.company = new Company();\n    this.getBeneficialOwners();\n  }\n\n  getBeneficialOwners(): void {\n    this.beneficialOwnerService.getBeneficialOwners()\n      .subscribe(owners => this.beneficialOwners = owners);\n  }\n\n  createCompany() {\n    this.companyService.createCompany(this.company)\n    .subscribe(company => this.router.navigate(['/companies']), \n               error => this.errors = error.error.response);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Update Company [{{company.name}}]</h2>\\r\\n\\r\\n<div>\\r\\n  <label>Name:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.name'><span class='validationError'>{{errors.name}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.name\\\" /><br>\\r\\n\\r\\n  <label>Address:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.address'><span class='validationError'>{{errors.address}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.address\\\" /><br>\\r\\n  \\r\\n  <label>City:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.city'><span class='validationError'>{{errors.city}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.city\\\" /><br>\\r\\n  \\r\\n  <label>Country:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.country'><span class='validationError'>{{errors.country}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.country\\\" /><br>\\r\\n  \\r\\n  <label>Email:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.email'><span class='validationError'>{{errors.email}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.email\\\" /><br>\\r\\n  \\r\\n  <label>Phone:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.phone'><span class='validationError'>{{errors.phone}}</span></div>\\r\\n  <input [(ngModel)]=\\\"company.phone\\\" /><br>\\r\\n  \\r\\n  <label>Beneficial Owners:</label>\\r\\n  <br>\\r\\n  <div *ngIf='errors.beneficialOwners'><span class='validationError'>{{errors.beneficialOwners}}</span></div>\\r\\n  <select multiple [(ngModel)]=\\\"company.beneficialOwners\\\" [compareWith]=\\\"compareOwners\\\">\\r\\n    <option *ngFor=\\\"let owner of beneficialOwners\\\" [ngValue]=\\\"owner\\\">{{owner.firstName}} {{owner.lastName}}</option>\\r\\n  </select>\\r\\n  <br>\\r\\n\\r\\n  <br>\\r\\n  \\r\\n  <button (click)=\\\"updateCompany();\\\">\\r\\n    Update\\r\\n  </button>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { CompanyService } from '../company.service';\r\nimport { BeneficialOwnerService } from '../beneficial-owner.service'\r\nimport { Company } from '../domain/company';\r\nimport { BeneficialOwner } from '../domain/beneficialOwner';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-company-update',\r\n  templateUrl: './company-update.component.html',\r\n  styleUrls: ['./company-update.component.css']\r\n})\r\nexport class CompanyUpdateComponent implements OnInit {\r\n\r\n  company: Company;\r\n  beneficialOwners: BeneficialOwner[];\r\n  errors;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private companyService: CompanyService,\r\n    private beneficialOwnerService: BeneficialOwnerService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.errors = {};\r\n    this.company = new Company();\r\n    this.getCompany();\r\n    this.getBeneficialOwners();\r\n  }\r\n\r\n  getCompany(): void {\r\n    const id = +this.route.snapshot.paramMap.get('id');\r\n    this.companyService.getCompany(id)\r\n      .subscribe(company => this.company = company);\r\n  }\r\n\r\n  getBeneficialOwners(): void {\r\n    this.beneficialOwnerService.getBeneficialOwners()\r\n      .subscribe(owners => this.beneficialOwners = owners);\r\n  }\r\n\r\n  updateCompany() {\r\n    this.companyService.updateCompany(this.company)\r\n    .subscribe(company => this.router.navigate(['/companies/' + this.company.id]), \r\n               error => this.errors = error.error.response);\r\n  }\r\n\r\n  compareOwners(o1: BeneficialOwner, o2: BeneficialOwner) {\r\n    return o1 && o2 ? o1.id === o2.id : o1 === o2;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Company } from './domain/company';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BeneficialOwner } from './domain/BeneficialOwner';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n\r\n  private companiesUrl = 'https://mighty-caverns-62961.herokuapp.com/companies';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCompanies(): Observable<Company[]> {\r\n    return this.http.get<Company[]>(this.companiesUrl);\r\n  }\r\n\r\n  getCompany(id: number): Observable<Company> {\r\n    const url = `${this.companiesUrl}/${id}`;\r\n    return this.http.get<Company>(url);\r\n  }\r\n\r\n  createCompany(company: Company): Observable<Company> {\r\n    return this.http.post<Company>(this.companiesUrl, company);\r\n  }\r\n\r\n  updateCompany(company: Company): Observable<Company> {\r\n    return this.http.put<Company>(this.companiesUrl + \"/\" + company.id, company);\r\n  }\r\n\r\n  addOwnersToCompany(company: Company, owners: Object): Observable<Company> {\r\n    return this.http.post<Company>(this.companiesUrl + \"/\" + company.id + \"/beneficialOwners\", owners);\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<h2>{{company.name}}</h2>\\r\\n\\r\\n<button routerLink=\\\"/companyUpdate/{{company.id}}\\\">Update</button> | \\r\\n<button routerLink=\\\"/companyAddOwner/{{company.id}}\\\">Add Owner</button>\\r\\n\\r\\n<p></p>\\r\\n\\r\\n<table>\\r\\n  <tbody>\\r\\n    <tr><td>id:</td><td>{{company.id}}</td></tr>\\r\\n    <tr><td>name:</td><td>{{company.name}}</td></tr>\\r\\n    <tr><td>address:</td><td>{{company.address}}</td></tr>\\r\\n    <tr><td>city:</td><td>{{company.city}}</td></tr>\\r\\n    <tr><td>country:</td><td>{{company.country}}</td></tr>\\r\\n    <tr><td>email:</td><td>{{company.email}}</td></tr>\\r\\n    <tr><td>phone:</td><td>{{company.phone}}</td></tr>\\r\\n    <tr>\\r\\n      <td>beneficial owners:</td>\\r\\n      <td>\\r\\n          <table>\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <td *ngFor=\\\"let owner of company.beneficialOwners\\\">\\r\\n                  {{owner.firstName}} {{owner.lastName}} |\\r\\n                </td>\\r\\n              </tr>\\r\\n            </thead>\\r\\n          </table>\\r\\n      </td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { CompanyService } from '../company.service';\r\nimport { Company } from '../domain/company';\r\n\r\n@Component({\r\n  selector: 'app-company',\r\n  templateUrl: './company.component.html',\r\n  styleUrls: ['./company.component.css']\r\n})\r\nexport class CompanyComponent implements OnInit {\r\n\r\n  company: Company\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private companyService: CompanyService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.company = { id: undefined, name: undefined, address: undefined, city: undefined, country: undefined, email: undefined, phone: undefined, beneficialOwners: undefined };\r\n    this.getCompany();\r\n  }\r\n\r\n  getCompany(): void {\r\n    const id = +this.route.snapshot.paramMap.get('id');\r\n    this.companyService.getCompany(id)\r\n      .subscribe(company => this.company = company);\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n    Welcome to the Companies Service!\\r\\n</p>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export class BeneficialOwner {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}","import { BeneficialOwner } from './BeneficialOwner';\r\n\r\nexport class Company {\r\n    id: number;\r\n    name: string;\r\n    address: string;\r\n    city: string;\r\n    country: string;\r\n    email: string;\r\n    phone: string;\r\n    beneficialOwners: BeneficialOwner[];\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}